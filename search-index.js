var searchIndex = {};
searchIndex["xfs"] = {"doc":"","items":[[3,"XfsStat","xfs","",null,null],[12,"extent_allocation","","",0,null],[12,"allocation_btree","","",0,null],[12,"block_mapping","","",0,null],[12,"block_map_btree","","",0,null],[12,"directory_operations","","",0,null],[12,"transactions","","",0,null],[12,"inode_operations","","",0,null],[12,"log_operations","","",0,null],[12,"tail_pushing_stats","","",0,null],[12,"io_map_write_convert","","",0,null],[12,"read_write_stats","","",0,null],[12,"attribute_operations","","",0,null],[12,"inode_clustering","","",0,null],[12,"vnode_statistics","","",0,null],[12,"buf_statistics","","",0,null],[12,"extended_precision_counters","","",0,null],[12,"debug","","",0,null],[3,"ExtentAllocation","","",null,null],[12,"allocated_extents","","Number of file system extents allocated over all XFS filesystems.",1,null],[12,"allocated_blocks","","Number of file system blocks allocated over all XFS filesystems.",1,null],[12,"freed_extents","","Number of file system extents freed over all XFS filesystems.",1,null],[12,"freed_blocks","","Number of file system blocks freed over all XFS filesystems.",1,null],[3,"AllocationBTree","","",null,null],[12,"lookups","","Number of lookup operations in XFS filesystem allocation btrees.",2,null],[12,"compares","","Number of compares in XFS filesystem allocation btree lookups.",2,null],[12,"inserts","","Number of extent records inserted into XFS filesystem allocation btrees.",2,null],[12,"deletes","","Number of extent records deleted from XFS filesystem allocation btrees.",2,null],[3,"BlockMapping","","",null,null],[12,"map_read","","Number of block map for read operations performed on XFS files.",3,null],[12,"map_write","","Number of block map for write operations performed on XFS files.",3,null],[12,"unmap","","Number of block unmap (delete) operations performed on XFS files.",3,null],[12,"list_insert","","Number of extent list insertion operations for XFS files.",3,null],[12,"list_delete","","Number of extent list deletion operations for XFS files.",3,null],[12,"list_lookup","","Number of extent list lookup operations for XFS files.",3,null],[12,"list_compare","","Number of extent list comparisons in XFS extent list lookups.",3,null],[3,"BlockMapBTree","","",null,null],[12,"lookups","","Number of block map btree lookup operations on XFS files.",4,null],[12,"compares","","Number of block map btree compare operations in XFS block map lookups.",4,null],[12,"inserts","","Number of block map btree records inserted for XFS files.",4,null],[12,"deletes","","Number of block map btree records deleted for XFS files.",4,null],[3,"DirectoryOperations","","",null,null],[12,"lookups","","This is a count of the number of file name directory lookups in XFS\nfilesystems. It counts only those lookups which miss in the operating\nsystem&#39;s directory name lookup cache and must search the real directory\nstructure for the name in question. The count is incremented once for each\nlevel of a pathname search that results in a directory lookup.",5,null],[12,"creates","","This is the number of times a new directory entry was created in XFS filesystems. Each time that a new file, directory, link, symbolic link, or special file is created in the directory hierarchy the count is incremented.",5,null],[12,"removes","","This is the number of times an existing directory entry was removed in XFS filesystems. Each time that a file, directory, link, symbolic link, or special file is removed from the directory hierarchy the count is incremented.",5,null],[12,"get_dents","","This is the number of times the XFS directory getdents operation was performed. The getdents operation is used by programs to read the contents of directories in a file system independent fashion. This count corresponds exactly to the number of times the getdents(2) system call was successfully used on an XFS directory.",5,null],[3,"Transactions","","",null,null],[12,"waited","","This is the number of meta-data transactions which waited to be committed to the on-disk log before allowing the process performing the transaction to continue. These transactions are slower and more expensive than asynchronous transactions, because they force the in memory log buffers to be forced to disk more often and they wait for the completion of the log buffer writes. Synchronous transactions include file truncations and all directory updates when the file system is mounted with the &#39;wsync&#39; option.",6,null],[12,"async","","This is the number of meta-data transactions which did not wait to be committed to the on-disk log before allowing the process performing the transaction to continue. These transactions are faster and more efficient than synchronous transactions, because they commit their data to the in memory log buffers without forcing those buffers to be written to disk. This allows multiple asynchronous transactions to be committed to disk in a single log buffer write. Most transactions used in XFS file systems are asynchronous.",6,null],[12,"empty","","This is the number of meta-data transactions which did not actually change anything. These are transactions which were started for some purpose, but in the end it turned out that no change was necessary.",6,null],[3,"InodeOperations","","",null,null],[12,"cache_lookups","","This is the number of times the operating system looked for an XFS inode in the inode cache. Whether the inode was found in the cache or needed to be read in from the disk is not indicated here, but this can be computed from the ig_found and ig_missed counts.",7,null],[12,"cache_hits","","This is the number of times the operating system looked for an XFS inode in the inode cache and found it. The closer this count is to the ig_attempts count the better the inode cache is performing.",7,null],[12,"cache_recycle","","This is the number of times the operating system looked for an XFS inode in the inode cache and saw that it was there but was unable to use the in memory inode because it was being recycled by another process.",7,null],[12,"cache_missed","","This is the number of times the operating system looked for an XFS inode in the inode cache and the inode was not there. The further this count is from the ig_attempts count the better.",7,null],[12,"cache_dup","","This is the number of times the operating system looked for an XFS inode in the inode cache and found that it was not there but upon attempting to add the inode to the cache found that another process had already inserted it.",7,null],[12,"cache_reclaime","","This is the number of times the operating system recycled an XFS inode from the inode cache in order to use the memory for that inode for another purpose. Inodes are recycled in order to keep the inode cache from growing without bound. If the reclaim rate is high it may be beneficial to raise the vnode_free_ratio kernel tunable variable to increase the size of the inode cache.",7,null],[12,"inode_attr_changes","","This is the number of times the operating system explicitly changed the attributes of an XFS inode. For example, this could be to change the inode&#39;s owner, the inode&#39;s size, or the inode&#39;s timestamps.",7,null],[3,"LogOperations","","",null,null],[12,"log_writes","","This variable counts the number of log buffer writes going to the physical log partitions of all XFS filesystems. Log data traffic is proportional to the level of meta-data updating. Log buffer writes get generated when they fill up or external syncs occur.",8,null],[12,"log_blocks","","This variable counts (in 512-byte units) the information being written to the physical log partitions of all XFS filesystems. Log data traffic is proportional to the level of meta-data updating. The rate with which log data gets written depends on the size of internal log buffers and disk write speed. Therefore, filesystems with very high meta-data updating may need to stripe the log partition or put the log partition on a separate drive.",8,null],[12,"noiclogs","","This variable keeps track of times when a logged transaction can not get any log buffer space. When this occurs, all of the internal log buffers are busy flushing their data to the physical on-disk log.",8,null],[12,"log_forced","","The number of times the in-core log is forced to disk. It is equivalent to the number of successful calls to the function xfs_log_force().",8,null],[12,"force_sleep","","Value exported from the xs_log_force_sleep field of struct xfsstats.",8,null],[3,"TailPushingStats","","",null,null],[12,"logspace","","Value from the xs_try_logspace field of struct xfsstats.",9,null],[12,"sleep_logspace","","Value from the xs_sleep_logspace field of struct xfsstats.",9,null],[12,"push_ails","","The number of times the tail of the AIL is moved forward. It is equivalent to the number of successful calls to the function xfs_trans_push_ail().",9,null],[12,"push_ail_success","","Value from xs_push_ail_success field of struct xfsstats.",9,null],[12,"push_ail_pushbuf","","Value from xs_push_ail_pushbuf field of struct xfsstats.",9,null],[12,"push_ail_pinned","","Value from xs_push_ail_pinned field of struct xfsstats.",9,null],[12,"push_ail_locked","","Value from xs_push_ail_locked field of struct xfsstats.",9,null],[12,"push_ail_flushing","","Value from xs_push_ail_flushing field of struct xfsstats.",9,null],[12,"push_ail_restarts","","Value from xs_push_ail_restarts field of struct xfsstats.",9,null],[12,"push_ail_flush","","Value from xs_push_ail_flush field of struct xfsstats.",9,null],[3,"IoMapWriteConvert","","",null,null],[12,"quick","","This is the number of buffers flushed out by the XFS flushing daemons which are written to contiguous space on disk. The buffers handled by the XFS daemons are delayed allocation buffers, so this count gives an indication of the success of the XFS daemons in allocating contiguous disk space for the data being flushed to disk.",10,null],[12,"split","","This is the number of buffers flushed out by the XFS flushing daemons which are written to non-contiguous space on disk. The buffers handled by the XFS daemons are delayed allocation buffers, so this count gives an indication of the failure of the XFS daemons in allocating contiguous disk space for the data being flushed to disk. Large values in this counter indicate that the file system has become fragmented.",10,null],[3,"ReadWriteStats","","",null,null],[12,"write","","This is the number of write(2) system calls made to files in XFS file systems.",11,null],[12,"read","","This is the number of read(2) system calls made to files in XFS file systems.",11,null],[3,"AttributeOperations","","",null,null],[12,"get","","The number of &quot;get&quot; operations performed on extended file attributes within XFS filesystems. The &quot;get&quot; operation retrieves the value of an extended attribute.",12,null],[12,"set","","The number of &quot;set&quot; operations performed on extended file attributes within XFS filesystems. The &quot;set&quot; operation creates and sets the value of an extended attribute.",12,null],[12,"remove","","The number of &quot;remove&quot; operations performed on extended file attributes within XFS filesystems. The &quot;remove&quot; operation deletes an extended attribute.",12,null],[12,"list","","The number of &quot;list&quot; operations performed on extended file attributes within XFS filesystems. The &quot;list&quot; operation retrieves the set of extended attributes associated with a file.",12,null],[3,"InodeClustering","","",null,null],[12,"count","","This is the number of calls to xfs_iflush which gets called when an inode is being flushed (such as by bdflush or tail pushing). xfs_iflush searches for other inodes in the same cluster which are dirty and flushable.",13,null],[12,"flushcnt","","Value from xs_icluster_flushcnt field of struct xfsstats.",13,null],[12,"flushinode","","This is the number of times that the inode clustering was not able to flush anything but the one inode it was called with.",13,null],[3,"VnodeStatistics","","",null,null],[12,"active","","Number of vnodes not on free lists.",14,null],[12,"alloc","","Number of times vn_alloc called.",14,null],[12,"get","","Number of times vn_get called.",14,null],[12,"hold","","Number of times vn_hold called.",14,null],[12,"rele","","Number of times vn_rele called.",14,null],[12,"reclaim","","Number of times vn_reclaim called.",14,null],[12,"remove","","Number of times vn_remove called.",14,null],[12,"free","","Number of times vn_free called.",14,null],[3,"BufStatistics","","",null,null],[12,"get","","",15,null],[12,"create","","",15,null],[12,"get_locked","","",15,null],[12,"get_locked_waited","","",15,null],[12,"busy_locked","","",15,null],[12,"miss_locked","","",15,null],[12,"page_retries","","",15,null],[12,"page_found","","",15,null],[12,"get_read","","",15,null],[3,"ExtendedPrecisionCounters","","",null,null],[12,"xstrat_bytes","","This is a count of bytes of file data flushed out by the XFS flushing daemons.",16,null],[12,"write_bytes","","This is a count of bytes written via write(2) system calls to files in XFS file systems. It can be used in conjunction with the write_calls count to calculate the average size of the write operations to files in XFS file systems.",16,null],[12,"read_bytes","","This is a count of bytes read via read(2) system calls to files in XFS file systems. It can be used in conjunction with the read_calls count to calculate the average size of the read operations to files in XFS file systems.",16,null],[4,"XfsError","","",null,null],[13,"Io","","We encounter an error reading from /proc/fs/xfs/stat",17,null],[13,"Incomplete","","We don&#39;t have enough information for a complete parse",17,null],[13,"Parse","","We encounter an error with the data wer&#39;re parsing",17,null],[5,"parse","","",null,null],[5,"read","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"get","","",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"xfserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"xfserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",17,{"inputs":[{"name":"xfserror"}],"output":{"name":"str"}}],[11,"cause","","",17,{"inputs":[{"name":"xfserror"}],"output":{"name":"option"}}],[11,"from","","",17,{"inputs":[{"name":"error"}],"output":{"name":"xfserror"}}]],"paths":[[3,"XfsStat"],[3,"ExtentAllocation"],[3,"AllocationBTree"],[3,"BlockMapping"],[3,"BlockMapBTree"],[3,"DirectoryOperations"],[3,"Transactions"],[3,"InodeOperations"],[3,"LogOperations"],[3,"TailPushingStats"],[3,"IoMapWriteConvert"],[3,"ReadWriteStats"],[3,"AttributeOperations"],[3,"InodeClustering"],[3,"VnodeStatistics"],[3,"BufStatistics"],[3,"ExtendedPrecisionCounters"],[4,"XfsError"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -&gt; T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -&gt; S, and a consumer C2 S -&gt; T, and makes a consumer R -&gt; T by applying C2 on C1&#39;s result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many0","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer&#39;s current computation state",null,null],[13,"Done","","A value of type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"err"}],"output":{"name":"err"}}],[11,"eq","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"err"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"needed"}],"output":{"name":"needed"}}],[11,"eq","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"needed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_known","","",2,{"inputs":[{"name":"needed"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"needed"},{"name":"f"}],"output":{"name":"needed"}}],[11,"clone","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"eq","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"err"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"err"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"fmt","","",4,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"consumerstate"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",5,{"inputs":[{"name":"consumerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",8,{"inputs":[{"name":"producerrepeat"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",9,null],[11,"eq","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"move"}],"output":{"name":"move"}}],[11,"fmt","","",6,{"inputs":[{"name":"move"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"apply","","",9,{"inputs":[{"name":"memproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"eq","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"fileproducerstate"}],"output":{"name":"fileproducerstate"}}],[11,"fmt","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fileproducer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,{"inputs":[{"name":"fileproducer"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",10,{"inputs":[{"name":"fileproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",11,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,{"inputs":[{"name":"mapconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",11,{"inputs":[{"name":"mapconsumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,{"inputs":[{"name":"chainconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",12,{"inputs":[{"name":"chainconsumer"}],"output":{"name":"consumerstate"}}],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"InputLength","","",null,null],[10,"input_len","","",14,{"inputs":[{"name":"inputlength"}],"output":{"name":"usize"}}],[8,"AsChar","","",null,null],[10,"as_char","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"char"}}],[10,"is_alpha","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_alphanum","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_0_to_9","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,{"inputs":[{"name":"iterindices"}],"output":{"name":"iter"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,{"inputs":[{"name":"getinput"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",19,{"inputs":[{"name":"getoutput"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",20,{"inputs":[{"name":"consumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",20,{"inputs":[{"name":"consumer"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer&#39;s state",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"dbg!","","Prints a message if the parser fails",null,null],[14,"dbg_dmp!","","Prints a message and the input if the parser fails",null,null],[14,"closure!","","Wraps a parser in a closure",null,null],[14,"named!","","Makes a function from a parser combination",null,null],[14,"call!","","Used to wrap common expressions and function as macros",null,null],[14,"apply!","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error!","","Prevents backtracking if the child parser fails",null,null],[14,"add_error!","","Add an error if the child parser fails",null,null],[14,"fix_error!","","translate parser result from IResult&lt;I,O,u32&gt; to IResult&lt;I,O,E&gt; with a custom type",null,null],[14,"complete!","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse!","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map!","","`flat_map!(R -&gt; IResult&lt;R,S&gt;, S -&gt; IResult&lt;S,T&gt;) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"map!","","`map!(I -&gt; IResult&lt;I,O&gt;, O -&gt; P) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function on the result of a parser",null,null],[14,"map_res!","","`map_res!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Result&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt!","","`map_opt!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Option&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value!","","`value!(T, R -&gt; IResult&lt;R, S&gt; ) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"expr_res!","","`expr_res!(Result&lt;E,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Result&lt;T,E&gt; and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt!","","`expr_opt!(Option&lt;O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Option&lt;T&gt; and returns a IResult::Done(I,T) if Some",null,null],[14,"chain!","","`chain!(I-&gt;IResult&lt;I,A&gt; ~ I-&gt;IResult&lt;I,B&gt; ~ ... I-&gt;IResult&lt;I,X&gt; , || { return O } ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchains parsers and assemble the results through a closure",null,null],[14,"tuple!","","`tuple!(I-&gt;IResult&lt;I,A&gt;, I-&gt;IResult&lt;I,B&gt;, ... I-&gt;IResult&lt;I,X&gt;) =&gt; I -&gt; IResult&lt;I, (A, B, ..., X)&gt;`\nchains parsers and assemble the sub results in a tuple.",null,null],[14,"alt!","","`alt!(I -&gt; IResult&lt;I,O&gt; | I -&gt; IResult&lt;I,O&gt; | ... | I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete!","","This is a combination of the `alt!` and `complete!` combinators. Rather\nthan returning `Incomplete` on partial input, `alt_complete!` will try the\nnext alternative in the chain. You should use this only if you know you\nwill not receive partial input for the rules you&#39;re trying to match (this\nis almost always the case for parsing programming languages).",null,null],[14,"switch!","","`switch!(I -&gt; IResult&lt;I,P&gt;, P =&gt; I -&gt; IResult&lt;I,O&gt; | ... | P =&gt; I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt!","","`opt!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"opt_res!","","`opt_res!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Result&lt;nom::Err,O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"cond_with_error!","","`cond_with_error!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond!","","`cond!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond_reduce!","","`cond_reduce!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nConditional combinator with error",null,null],[14,"peek!","","`peek!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result without consuming the input",null,null],[14,"tap!","","`tap!(name: I -&gt; IResult&lt;I,O&gt; =&gt; { block }) =&gt; I -&gt; IResult&lt;I, O&gt;`\nallows access to the parser&#39;s result without affecting it",null,null],[14,"pair!","","`pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair!","","`separated_pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I, T&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded!","","`preceded!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\npreceded(opening, X) returns X",null,null],[14,"terminated!","","`terminated!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,T&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nterminated(X, closing) returns X",null,null],[14,"delimited!","","`delimited!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,U&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list!","","`separated_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"separated_nonempty_list!","","`separated_nonempty_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_nonempty_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"many0!","","`many0!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1!","","`many1!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n!","","`many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count!","","`count!(I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed!","","`count_fixed!(O, I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, [O; nb]&gt;`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value!","","`length_value!(I -&gt; IResult&lt;I, nb&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"fold_many0!","","`fold_many0!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 0 or more times and folds the list of return values",null,null],[14,"fold_many1!","","`fold_many1!(I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser 1 or more times and folds the list of return values",null,null],[14,"fold_many_m_n!","","`fold_many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;, R, Fn(R, O) -&gt; R) =&gt; I -&gt; IResult&lt;I, R&gt;`\nApplies the parser between m and n times (n included) and folds the list of return value",null,null],[14,"method!","","Makes a method from a parser combination",null,null],[14,"call_m!","","Used to called methods then move self back into self",null,null],[14,"apply_m!","","emulate function currying for method calls on structs\n`apply!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"recognize!","","`recognize!(&amp;[T] -&gt; IResult&lt;&amp;[T], O&gt; ) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag!","","`tag!(&amp;[T]: nom::AsBytes) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ndeclares a byte array as a suite to recognize",null,null],[14,"is_not!","","`is_not!(&amp;[T:AsBytes]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a!","","`is_a!(&amp;[T]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"escaped!","","`escaped!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform!","","`escaped_transform!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], Vec&lt;T&gt;&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"take_while!","","`take_while!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1!","","`take_while1!(&amp;[T] -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till!","","`take_till!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;str&gt;`\nsame as take! but returning a &amp;str",null,null],[14,"take_until_and_consume!","","`take_until_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until!","","`take_until!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume!","","`take_until_either_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either!","","`take_until_either!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`",null,null],[14,"length_bytes!","","`length_bytes!(&amp;[T] -&gt; IResult&lt;&amp;[T], nb&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits!","","`bits!( parser ) =&gt; ( &amp;[u8], (&amp;[u8], usize) -&gt; IResult&lt;(&amp;[u8], usize), T&gt; ) -&gt; IResult&lt;&amp;[u8], T&gt;`\ntransforms its byte slice input in a bit stream for the underlying parsers",null,null],[14,"take_bits!","","`take_bits!(type, nb) =&gt; ( (&amp;[T], usize), U, usize) -&gt; IResult&lt;(&amp;[T], usize), U&gt;`\ngenerates a parser consuming the specified number of bits.",null,null],[14,"tag_bits!","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16!","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32!","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64!","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16!","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32!","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64!","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of!","","matches one of the provided characters",null,null],[14,"none_of!","","matches anything but the provided characters",null,null],[14,"char!","","matches one character: `char!(char) =&gt; &amp;[u8] -&gt; IResult&lt;&amp;[u8], char&gt;",null,null],[14,"consumer_from_parser!","","",null,null],[14,"tag_s!","","`tag_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ndeclares a string as a suite to recognize",null,null],[14,"take_s!","","`take_s!(nb) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s!","","`is_not_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s!","","`is_a_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s!","","`take_while_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s!","","`take_while1_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s!","","`take_till_s!(&amp;str -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s!","","`take_until_and_consume_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s!","","`take_until_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
initSearch(searchIndex);
